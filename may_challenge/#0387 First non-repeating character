/////////////////////////////c++///////////////////////////
class Solution {
public:
    int firstUniqChar(string s) {
        
        int a[26]={0} , index = -1 ;
               
        for(int i=0;i<s.size();i++)
        {
           a[s[i]-'a']++;
        }
        for(int i=0;i<s.size();i++)
        { if(a[s[i]-'a']==1)
            { index = i;
            break;}
        }
            
            return index;
        
        return 0;
    }
};

/////////////////////////////////////////in JAVA USING HASH MAP/////////////////////////////////////////
class Solution {
    public int firstUniqChar(String s) {
        HashMap<Character, Integer> count = new HashMap<Character, Integer>();
        int n = s.length();
        // build hash map : character and how often it appears
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            count.put(c, count.getOrDefault(c, 0) + 1);
        }
        
        // find the index
        for (int i = 0; i < n; i++) {
            if (count.get(s.charAt(i)) == 1) 
                return i;
        }
        return -1;
    }
}
///////////////////////////////////////////IN PYTHON USING HASH MAP///////////////////////////////////////////
class Solution:
    def firstUniqChar(self, s: str) -> int:
        """
        :type s: str
        :rtype: int
        """
        # build hash map : character and how often it appears
        count = collections.Counter(s)
        
        # find the index
        for idx, ch in enumerate(s):
            if count[ch] == 1:
                return idx     
        return -1
